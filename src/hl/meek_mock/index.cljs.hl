(page "index.html"
  (:require
   [meek-mock.rpc :as rpc]
   [tailrecursion.hoplon.reload :refer [reload-all]]
   [hoplon.reveal.elements :refer [slideshow intro bullet slide highlight two-column-table chapter]]))


(defelem btn [{:keys [on-click] :as attrs} kids]
  (button
   (assoc attrs
     :on-click (fn [e] (on-click e) (.blur (.-target e))))
   kids))

(defelem sequencer [{:keys [pattern-cell on-click] :as attrs} _]
  (table :class "sequencer"
   (tbody
    (map
     (fn [inst]
       (tr
        (td (text "~{inst}"))
        (map
         (fn [beat]
           (td :class
               (cell= {:grid-cell true
                       :selected (get-in pattern-cell [inst beat])})
               (btn :on-click #(on-click inst beat))))
         (range (count (first (vals @pattern-cell)))))))
     (keys @pattern-cell)))))

;; ----------
;; Initialize
;; ----------

(html
 (head)
 (body
  (slideshow
   (intro
    (h1 "Functional Music")
    (h3 "with " (span :class "pink" "Pink") " and " (span :class "blue" "Score"))
    (bullet "Daniel Neal")
    (bullet "20th January 2015"))

   (chapter
    (slide
     (p (span "Why ")
        (span :class "fragment pink" "use functional programming techniques to ")
        (span "write music on computers?")))

    (slide
     (img :src "images/schubert.png"))

    (slide
     (img :src "images/protools.png"))

    (slide
     (h1 "Abstraction")))

   (chapter
    (slide
     (h2 "Demo 1: the sine wave")
     (highlight
      ;;{{
      (require '[pink.oscillators :refer [sine]])
      (require '[pink.simple :refer [add-afunc start-engine]])

      (start-engine)
      (add-afunc (sine 110))
      ;;}}
      )
     (btn :on-click #(rpc/play-sine! 110) "Play")
     (btn :on-click #(rpc/clear-engine!) "Stop"))

    (slide
     (p "How is this sound being made?")
     (img :src "images/sinewave.png")
     (p :class "pink" "unit generators"))

   (slide
    (p "Combining unit generators")
    (img :src "images/unitgenerators.png")))

   (chapter
    (slide
     (h2 "Demo 2: a filtered, detuned saw")
     (highlight
      ;;{{
      (defn saw [f]
        (mul 0.33
             (butterlp
              (sum
               (blit-saw f)
               (blit-saw (mul f 1.01))
               (blit-saw (mul f 0.99)))
              1200)))

      (add-afunc (saw 110))
      ;;}}
      )
     (btn :on-click #(rpc/play-saw! 110) "Play")
     (btn :on-click #(rpc/clear-engine!) "Stop")))

    (chapter
     (slide
     (h2 "Demo 3: drum kit")
     (highlight
      ;;{{
      (def kit
        {:kick #(sum (mul (sine 60)
                          (env [0.0 1.5 0.03 0.1 0.1 0.0]))
                     (mul (butterlp (white-noise) 1500)
                          (env [0.0 0.4 0.05 0.02 0.1 0.0])))

         :hat #(mul (butterhp (butterlp (white-noise) 6000) 3000)
                    (env [0.0 1.0 0.3 0.0]))

         :snare #(let-s [snare (mul 3 (white-noise) (xar 0.01 0.2))]
                        (sum snare (butterbp (mul 3 snare) 100 100)))})

       (defn play-kit! [instrument]
         (add-afunc (kit instrument) 0.4))
      ;;}}
      )
     (map (fn [i] (btn :on-click #(do (println i) (rpc/play-kit! i)) (name i))) [:kick :hat :snare])))

   (chapter
    (slide
     (h2 "Demo 4: Temporal Recursion")
     (highlight
      ;;{{
      (defn play []
        (add-audio-events
         (event (kit :kick) 0.0)
         (event (kit :snare) 0.5)
         (event (kit :kick) 1.0)
         (event (kit :snare) 1.5)
         (event (kit :hat) 1.75)
         (event play 2.0)))
      ;;}}
      )
      (btn :on-click #(rpc/play-drum-loop!) "Play")
      (btn :on-click #(rpc/clear-engine!) "Stop")))

   (chapter
    (slide
     (h2 "Demo 5: Pattern player")
     (highlight
      ;;{{
      (defn pattern-player []
        (let [n (atom 0)
              pattern (atom nil)
              tempo (atom 240)
              playing (atom false)
              trigger-fn (fn []
                           (let [length (count (first (vals @pattern)))]
                             (doseq [[inst beats] @pattern :when (beats @n)]
                               (add-afunc ((kit inst))))
                             (swap! n #(rem (inc %) length))))
              clock (create-clock tempo trigger-fn)]
          {:play! (fn [] (when-not @playing
                           (add-post-cfunc clock)
                           (reset! playing true)))
           :stop! (fn [] (when @playing
                           (remove-post-cfunc clock)
                           (reset! playing false)))
           :pattern pattern
           :tempo tempo}))
      ;;}}
      ))

    (let [_ false X true
           pattern
           (cell= (or (:pattern rpc/pattern)
                      {:kick  [X _ _ _ X _ _ _ X _ _ _ X _ _ _]
                       :snare [_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _]
                       :hat   [_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _]}))
          tempo (cell 120)]
      (slide
       (sequencer :pattern-cell pattern :on-click rpc/flip!)
       (btn :on-click #(rpc/play-pattern! @pattern @tempo) "Play")
       (btn :on-click #(rpc/stop-pattern!) "Stop")
       (h2 (text "~{tempo} bpm"))
       (btn :on-click (fn [] (swap! tempo #(- % 20)) (rpc/set-pattern-tempo! @tempo)) "Slower")
       (btn :on-click (fn [] (swap! tempo #(+ % 20)) (rpc/set-pattern-tempo! @tempo)) "Faster"))))

   (chapter
    (slide
     (h2 "Demo 6: Note Player")
     (highlight
      ;;{{
      (defn note-player
        [keymap inst]
        (let [notes (atom {})]
          {:note-on! (fn [k]
                       (let [afn (inst (keymap k))]
                         (when-not (get @notes k)
                           (add-afunc afn)
                           (swap! notes assoc k afn))))

           :note-off! (fn [k]
                        (when-let [afn (get @notes k)]
                          (swap! notes dissoc k)
                          (remove-afunc afn)))}))
      ;;}}
      ))

    (let [key-player-on (cell false)
          held-keys (cell #{})]
      (slide
       (with-init!
         (.keydown (js/jQuery js/document)
                   (fn [e]
                     (when @key-player-on
                       (let [k (.fromCharCode js/String (.-which e))]
                         (rpc/note-on! k)
                         (swap! held-keys conj k)))))
         (.keyup (js/jQuery js/document)
                 (fn [e]
                   (when @key-player-on
                     (let [k (.fromCharCode js/String (.-which e))]
                       (rpc/note-off! k)
                       (swap! held-keys disj k))))))
       (h1 :class "key-player" (text "~(apply str (interpose \\: (sort held-keys)))"))
       (btn :on-click #(swap! key-player-on not)
            :text (cell= (if key-player-on "Off" "On"))))))

   (chapter
    (slide
     (h1 "References")
     (div (a :href "http://github.com/kunstmusik/pink" (span :class "pink" "Pink") (span :class "neutral" "http://github.com/kunstmusik/pink")))
     (div (a :href "http://github.com/kunstmusik/score" (span :class "blue" "Score") (span :class "neutral" "https://github.com/kunstmusik/score")))
     (div (a :href "http://github.com/danielneal/meek-mock" (span :class "pink" "This") (span :class "neutral" "https://github.com/danielneal/meek-mock"))))))))













